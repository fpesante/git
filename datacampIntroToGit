### INTRODUCTION TO GIT ###
## I.A. INTRODUCTION TO GIT > Introduction to version control with Git ##
# Useful shell commands

pwd	#print working directory

ls #all files in directory

##Changing directory
cd archive #cd followed by the directory we want to move

##Editing a file
nano finance.csv #preview and modify files. Nano followed by a file name. Used to delete, add or change the content of a file. Save ctrl + 0; exit the editor ctrl + X
echo "Review for duplicate records" > todo.txt

echo "Review for duplicate records" >> todo.txt #append content

##Checking Git version
git --version

## Saving files
#######################################################
## I.B. INTRODUCTION TO GIT > SAVING FILES ##
##Parts of the project: Files and directories; repositories
##Staging and commiting
##Saving a draft: staging area
##Save files/update the repo: Commit changes
ls -a #show hidden files
na"49,M,No,Yes,Never,Yes,Yes,No"no report.md #to open a text editor report file	#save ctrl + 0; ctrl + X

##adding a sigle file
git add report.md #followed by the file name
git add . #adding all modified files

##Making a commit
git commit -m "Updating TODO list in report.md" #to add log message, for reference; should be short and concise

##Check the status of files
git status  #to know which files have or not changes and are in the staging area.

################# EXERCISES  #######################
## WHERE DOES GIT STORE INFORMATION ##
# Your home directory /home/repl contains a repo called mh_survey, which has a directory called data.

# Where is information about the history of the files in /home/repl/mh_survey/data stored?
/home/repl/mh_survey/.git

## THE GIT WORKFLOW ##
#Modify
echo
nano filename
#Draft
git add filename
git add .
#Save
git commit -m
#######
# Git project analyzing the mental health of employees working at tech companies.## 

## ADDING A FILE ##
# For the remainder of the course, you will be working on a Git project analyzing the mental health of employees working at tech companies.
# In this exercise, you will complete a version control workflow to modify the mental_health_survey.csv file.
# You are located in mh_survey/data, which contains the csv file you need to edit.
## INSTRUCTIONS ##
# 1. Add a new row of data at the end of mental_health_survey.csv containing: "49,M,No,Yes,Never,Yes,Yes,No"
echo "49,M,No,Yes,Never,Yes,Yes,No" >> mental_health_survey.csv
# 2. Place the updated file in the staging area.
git add mental_health_survey.csv
# 3. Commit the modified file with the log message "Adding one new participant's data"
git commit -m  "Adding one new participant's data"

## ADDING MULTIPLE FILES ##
# You've added one more task to the report.md and an extra row of participant data tomental_health_survey.csv files:
# report.md:
# TODO: Add data visualizations.
# mental_health_survey.csv:
# 49,M,No,Yes,Never,Yes,Yes,No
# You need to figure out which files are in the repo, and which are in the staging area, so you can update everything.
## INSTRUCTIONS ##
# 1. Check which files are in the staging area but not yet committed.
git status
# 2. Add all files in your current directory and all subdirectories into the staging area.
git add .
# 3. Commit all files in the staging area with the log message "Added 3 participants and a new section in report"
git commit -m "Added 3 participants and a new section in report"

# git status is a great way to see where you are in the version control workflow, allowing you to take steps to ensure everything is up-to-date. The commit output shows that two files were changed!
#####################################################
## I.C. INTRODUCTION TO GIT > COMPARING FILES ##
# Comparing a single file
nano report.md
      #Mental health in Tech Survey                  #adding task to complete
      TODO: write executive summary.
      TODO: include link to raw data.
      TODO: add refrences.
      TODO: add summary statistics.
# Updating the file
git add .  #to add the report to the staging area
git commit -m "Adding task for references and summary statistics in report.md # commit our changes
git diff report.md      #comparing and unstaged file with the last commit
# @@ -1,5 +1,5 @@      #report line changes: 1 lines removed from line 5; 1 lines added to line 5
# lines with - symbol: removed line
# lines with + symblo: added line

# Comparing a staged file with the last commit
git add report.md
git diff -r HEAD report.md # to look for a particular edition in the file

# Comparing multiple staged files with the last commit
cd data #to switch into the data directory
nano mh_tech_survey.csv # to modify csv to add an extra participant's survey responses
git add mh_tech_survey.csv # add the file to the staging area.
git diff -r HEAD # to look at all files in the staging area

#####################################################
## II.A. MAKING CHANGES > STORING DATA WITH GIT ##
# The commit structure
## Git stores data through commits, which have three parts:
### The commit itself: contains metadata such as the author, commit message, and time of the commit. 
### The tree: tracks the names and locations in the repo when that commit happened. 
### The blob: short for binary large object. A blob may contain data of any kind. Blobs contain a compressed snapshot of the contents of the file when the commit happened.

git log # We can view commit information w this command, which will display all commits made to the repo in chronological order, starting with the oldest. It will show the commit hash, author, date, and commit message. 
git show 35f4b4d # displays the log entry for that commit at the top, followed by a diff output showing changes between the file in that commit and the current version in the repo.

## II.B. MAKING CHANGES > VIEWING CHANGES ##
git diff -r HEAD~1 # the second most recent commit
git diff -r HEAD~2 # the commit before 1

git show HEAD~3 # to look at the fourth most recent commit

git diff 35f4b4d 186398f # to see changes between 2 commits numbering its git hashes
git diff HEAD~3 HEAD~2 # another way to do the same

# Changes per document by line
git annotate report.md  # identifying the author in case of collective works

## II.B. MAKING CHANGES > UNDOING CHANGES BEFORE COMMITTING ##
git reset HEAD summary_statistics.csv # to unstage a sigle file
nano summary_statistics.csv # to update a file
git add summary_statistics.csv # to stage it again
git commit -m "Adding age summary statistics" # making a commit to that file only, including a message
git reset HEAD # to unstage all file to the repo
git checkout -- summary_statistics.csv # undo changes to a file in the repository
git checkout . # undo changes to all unstages files in our repo. Period stands for the current directory

git add . # to save the repo in this state we then need to add all files to the staging area
git commit -m "Restore repo to previous commit" # make a commit.

## II.C. MAKING CHANGES > RESTORING AND REVERTING
# We'll look at how to customize our log commands as our projects scale, restore files to previous versions from particular commits, and delete all files that are not being tracked by Git.
# Customizing the log output
git log -3 # restrict the number of commits to 3 most recent 
git log -3 report.md # to only look at the commit history of one file
git log --since='Month Day Year' # restrict by date 
git log --since='Apr 2 2022'
git log --since='Apr 2 2022' --until='Apr 11 2022' # search a range
git checkout dc9d8fac mental_health_survey.csv # restore or revert a version from a specific commit
git checkout HEAD~1 mental_health_survey.csv # another way to do it, being the second commit
git checkout dc9d8fac # restore a repo to a previous state
git clean -n # to list all untracked files
git clean -f # delete those files. Cannot be undone

## III.A. GIT WORKFLOWS > CONFIGURING GIT
# Git has a range of customizable settings that can simplify our version control tasks, improving productivity!
# Each level overrides the one above it,
git config --list # levels of settings
git config --local # settings for one specific project
git config --global # for all of our projects
git config --system # for every user on this computer

git config --global setting value # To modify a global setting
git config --global user.email johnsmith@datacamp.com # change email address
git config --global user.name 'John Smith' # change user name

# Using alias
git config --global alias.ci 'commit -m' # shortnen command for commiting files
git ci # instead of "git commit --m"

# Create a custom alias
# for any commands, for example, wen unstaging files
git config --global alias.unstage 'reset HEAD'
# Careful not to overwrite existing commands!

#Tracking aliases
git config --global --list ##

# Ignoring specific files
nano .gitignore
*.log      # with a wildcard
