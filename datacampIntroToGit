### INTRODUCTION TO GIT ###
## I.A. INTRODUCTION TO GIT > Introduction to version control with Git ##
# Useful shell commands

pwd	#print working directory

ls #all files in directory

##Changing directory
cd archive #cd followed by the directory we want to move

##Editing a file
nano finance.csv #preview and modify files. Nano followed by a file name. Used to delete, add or change the content of a file. Save ctrl + 0; exit the editor ctrl + X
echo "Review for duplicate records" > todo.txt

echo "Review for duplicate records" >> todo.txt #append content

##Checking Git version
git --version

## Saving files
#######################################################
## I.B. INTRODUCTION TO GIT > SAVING FILES ##
##Parts of the project: Files and directories; repositories
##Staging and commiting
##Saving a draft: staging area
##Save files/update the repo: Commit changes
ls -a #show hidden files
nano "49,M,No,Yes,Never,Yes,Yes,No" report.md #to open a text editor report file	#save ctrl + 0; ctrl + X

##adding a sigle file
git add report.md #followed by the file name
git add . #adding all modified files

##Making a commit
git commit -m "Updating TODO list in report.md" #to add log message, for reference; should be short and concise

##Check the status of files
git status  #to know which files have or not changes and are in the staging area.

################# EXERCISES  #######################
## WHERE DOES GIT STORE INFORMATION ##
# Your home directory /home/repl contains a repo called mh_survey, which has a directory called data.

# Where is information about the history of the files in /home/repl/mh_survey/data stored?
/home/repl/mh_survey/.git

## THE GIT WORKFLOW ##
#Modify
echo
nano filename
#Draft
git add filename
git add .
#Save
git commit -m
#######
# Git project analyzing the mental health of employees working at tech companies.## 

## ADDING A FILE ##
# For the remainder of the course, you will be working on a Git project analyzing the mental health of employees working at tech companies.
# In this exercise, you will complete a version control workflow to modify the mental_health_survey.csv file.
# You are located in mh_survey/data, which contains the csv file you need to edit.
## INSTRUCTIONS ##
# 1. Add a new row of data at the end of mental_health_survey.csv containing: "49,M,No,Yes,Never,Yes,Yes,No"
echo "49,M,No,Yes,Never,Yes,Yes,No" >> mental_health_survey.csv
# 2. Place the updated file in the staging area.
git add mental_health_survey.csv
# 3. Commit the modified file with the log message "Adding one new participant's data"
git commit -m  "Adding one new participant's data"

## ADDING MULTIPLE FILES ##
# You've added one more task to the report.md and an extra row of participant data tomental_health_survey.csv files:
# report.md:
# TODO: Add data visualizations.
# mental_health_survey.csv:
# 49,M,No,Yes,Never,Yes,Yes,No
# You need to figure out which files are in the repo, and which are in the staging area, so you can update everything.
## INSTRUCTIONS ##
# 1. Check which files are in the staging area but not yet committed.
git status
# 2. Add all files in your current directory and all subdirectories into the staging area.
git add .
# 3. Commit all files in the staging area with the log message "Added 3 participants and a new section in report"
git commit -m "Added 3 participants and a new section in report"

# git status is a great way to see where you are in the version control workflow, allowing you to take steps to ensure everything is up-to-date. The commit output shows that two files were changed!
#####################################################
## I.C. INTRODUCTION TO GIT > COMPARING FILES ##
# Comparing a single file
nano report.md
      #Mental health in Tech Survey                  #adding task to complete
      TODO: write executive summary.
      TODO: include link to raw data.
      TODO: add refrences.
      TODO: add summary statistics.
# Updating the file
git add .  #to add the report to the staging area
git commit -m "Adding task for references and summary statistics in report.md # commit our changes
git diff report.md      #comparing and unstaged file with the last commit
# @@ -1,5 +1,5 @@      #report line changes: 1 lines removed from line 5; 1 lines added to line 5
# lines with - symbol: removed line
# lines with + symblo: added line

# Comparing a staged file with the last commit
git add report.md
git diff -r HEAD report.md # to look for a particular edition in the file

# Comparing multiple staged files with the last commit
cd data #to switch into the data directory
nano mh_tech_survey.csv # to modify csv to add an extra participant's survey responses
git add mh_tech_survey.csv # add the file to the staging area.
git diff -r HEAD # to look at all files in the staging area

#####################################################
## II.A. MAKING CHANGES > STORING DATA WITH GIT ##
# The commit structure
## Git stores data through commits, which have three parts:
### The commit itself: contains metadata such as the author, commit message, and time of the commit. 
### The tree: tracks the names and locations in the repo when that commit happened. 
### The blob: short for binary large object. A blob may contain data of any kind. Blobs contain a compressed snapshot of the contents of the file when the commit happened.

git log # We can view commit information w this command, which will display all commits made to the repo in chronological order, starting with the oldest. It will show the commit hash, author, date, and commit message. 
git show 35f4b4d # displays the log entry for that commit at the top, followed by a diff output showing changes between the file in that commit and the current version in the repo.

## II.B. MAKING CHANGES > VIEWING CHANGES ##
git diff -r HEAD~1 # the second most recent commit
git diff -r HEAD~2 # the commit before 1

git show HEAD~3 # to look at the fourth most recent commit

git diff 35f4b4d 186398f # to see changes between 2 commits numbering its git hashes
git diff HEAD~3 HEAD~2 # another way to do the same

# Changes per document by line
git annotate report.md  # identifying the author in case of collective works

## II.B. MAKING CHANGES > UNDOING CHANGES BEFORE COMMITTING ##
git reset HEAD summary_statistics.csv # to unstage a sigle file
nano summary_statistics.csv # to update a file
git add summary_statistics.csv # to stage it again
git commit -m "Adding age summary statistics" # making a commit to that file only, including a message
git reset HEAD # to unstage all file to the repo
git checkout -- summary_statistics.csv # undo changes to a file in the repository
git checkout . # undo changes to all unstages files in our repo. Period stands for the current directory

git add . # to save the repo in this state we then need to add all files to the staging area
git commit -m "Restore repo to previous commit" # make a commit.

## II.C. MAKING CHANGES > RESTORING AND REVERTING
# We'll look at how to customize our log commands as our projects scale, restore files to previous versions from particular commits, and delete all files that are not being tracked by Git.
# Customizing the log output
git log -3 # restrict the number of commits to 3 most recent 
git log -3 report.md # to only look at the commit history of one file
git log --since='Month Day Year' # restrict by date 
git log --since='Apr 2 2022'
git log --since='Apr 2 2022' --until='Apr 11 2022' # search a range
git checkout dc9d8fac mental_health_survey.csv # restore or revert a version from a specific commit
git checkout HEAD~1 mental_health_survey.csv # another way to do it, being the second commit
git checkout dc9d8fac # restore a repo to a previous state
git clean -n # to list all untracked files
git clean -f # delete those files. Cannot be undone

#######################################################
## III.A. GIT WORKFLOWS > CONFIGURING GIT
# Git has a range of customizable settings that can simplify our version control tasks, improving productivity!
# Each level overrides the one above it,
git config --list # levels of settings
git config --local # settings for one specific project
git config --global # for all of our projects
git config --system # for every user on this computer

git config --global setting value # To modify a global setting
git config --global user.email johnsmith@datacamp.com # change email address
git config --global user.name 'John Smith' # change user name

# Using alias
git config --global alias.ci 'commit -m' # shortnen command for commiting files
git ci # instead of "git commit --m"

# Create a custom alias
# for any commands, for example, when unstaging files
git config --global alias.unstage 'reset HEAD'
# Careful not to overwrite existing commands!

#Tracking aliases
git config --global --list ##

# Ignoring specific files
nano .gitignore
*.log      # with a wildcard

## EXCERCISES
git config --global --list # Check the global settings to see if the update has been made.
git config --global alias.st 'status' # Create an alias for the global command used to check the state of files, calling it st.
git st

#######################################################
## III.B. GIT WORKFLOWS > BRANCHES
# Branches enable us to have multiple versions of our work and track each version systematically. 
# Merging branches: When we merge two branches, the commits are called parent commits. One branch is known as the **source**, the branch we want to merge from, and the other is known as the **destination**, the branch we want to merge into. .

git branch # identifying branches. An asterisk next to it,  is how Git tells us we are currently in this branch.
git checkout -b report # We can create a new branch called report
git diff main summary-statistics # difference between branches

#EXERCISE
# Creating new branches
# You have some more content to add to summary_statistics.csv for the mh_survey project, and then you'll be moving on to the report phase. Therefore, you would like to make a new branch called report where you can work on the project report.
# The branch needs to be created from the summary-statistics branch, in which you are currently located.
# Your task is to finish working on the summary statistics file, make a commit, then create the report branch.

# Instructions 
# Edit summary_statistics.txt and add the following text: "Mean age is 32 years old, with a standard deviation of 6.72"
echo "Mean age is 32 years old, with a standard deviation of 6.72" >> summary_statistics.txt
# Add summary_statistics.txt to the staging area.
git add summary_statistics.txt
# Make a commit with the log message "Adding age summary statistics".
git commit -m "Adding age summary statistics"
# Create a new branch called report
git checkout -b report

# Comparing branches
# If you're working across multiple branches then you may want to compare the state of repos between branches from time to time.
# You are in the mh_survey repository and would like to compare two branches.
# Execute a command to compare the alter-report-title and summary-statistics branches.
git diff alter-report-title summary-statistics

#######################################################
## III.C. GIT WORKFLOWS > WORKING WHITH BRANCHES
git checkout -b new_branch # create a new branch
git checkout debugging # switch between branches (to the new one)
git brach # to confirm
git merge source destination # merging branches
git merge summary-statistics main # example

# Exercise
# Switching branches
# You have previously created a new branch called report.
# Now it's time to switch into this new branch and edit report.md with some of your findings.

# Instructions 
# Switch to the report branch.
git checkout report
# Add "80% of participants were male, compared to the industry average of 67%." to the end of report.md.
echo "80% of participants were male, compared to the industry average of 67%." >> report.md
# Place report.md into the staging area.
git add report.md
# Make a commit with the log message "Add gender summary in report".
git commit -m "Add gender summary in report"

# Merging two branches
# You've updated the project report in the report branch, and now need to merge it into main to keep it accurate and up to date.
# Instructions
# Merge the report branch into the main branch.
git merge report main

#######################################################
## III.D. GIT WORKFLOWS > HANDLING CONFLICT
git merge update main # different versions in the main and update branches: CONFLICT(add/add): Merge conflict in todo.txt ...
nano todo.txt # open the file in conflict
#  <<<<<<<<< HEAD: file contents in the latest comment 
#  ==============: center of the conflict
# >>>>>>>> update: additional content
# update or erase in the command prompt
git add todo.txt # merging branches
git commit -m "Resolving todo.txt conflict"
git merge update main # updated with resolved conflict of the 2 branches
# prevention is the best
# each branch for a specific task
# avoid editing a file in multiple branches

# Exercise
# Resolving a conflict
# You've added a reminder to the report.md and then switched to the summary-statistics branch.
# You remember that you need that extra task from the report in this branch too, so you decide to add it and make a commit.
# You're now ready to merge summary-statistics into main but there is a conflict in report.md.
# Looks like there was an error when adding the task into report.md in the summary-statistics branch.
# You'll need to resolve any conflicts to merge the branches.

# Instructions
# Edit report.md, removing content from the summary_statistics branch along with any Git conflict syntax.
nano report.md

# Mental Health in Tech Survey
TODO: write executive summary.
TODO: include link to raw data.
TODO: remember to cite funding sources!
<<<<<<<< HEAD
TODO: Add graphs.
=======
TODO: Add data visualizations.
>>>>>>>> main

# Mental Health in Tech Survey
TODO: write executive summary.
TODO: include link to raw data.
TODO: remember to cite funding sources!
TODO: Add data visualizations.

#######################################################
## IV.A. COLLABORATING WITH GIT > CREATING REPOS
# Creating  new repos, and convert an existing project into a Git repo.
# Benefits to creating a Git repo: 
# + the ability to systematically track the versions of files, 
# + to provide an easy way to collaborate with colleagues, 
# + store everything so we can avoid losing our files

# example: creating a new repo
git init mental-health-workspace #mental-health-workspace -> name of the project
cd mental-health-workspace # to change into this directory
git status # check if the repo initialized correctly

# convert an existing project into a repo
git init # run the commnand from the project directory
# avoid creating git repo inside another (nested repos) to avoid confusion

# Exercise
# *Setting up a new repo*
# You have finished working on the mh_survey project, and just in time too! You've been assigned to work with a colleague on a new research project investigating the relationship between anxiety and the number of different computer systems used in a workplace.
# You decide to get a head start by creating a new Git repo along with a to-do list.

# Instructions 1/3
# Create a Git repo called anxiety_workplace in your current directory.
git init anxiety_workplace
# Move into the new anxiety_workplace directory.
cd anxiety_workplace
# Create a file called todo.txt containing the following text: "TODO: Recap on existing research.".
echo "TODO: Recap on existing research." > todo.txt

# *Converting an existing project*
# Imagine you've been working on the mental health survey project, but are only now learning about the benefits of Git!
# You want to convert your project into a Git repo so you can track your files moving forward.
# You're inside the mh_survey directory.

# Instructions
# Turn your project into a Git repo.
git init mh_survey

#######################################################
## IV.B. COLLABORATING WITH GIT > WORKING WITH REMOTES
# Example: GitHub, Bitbucket, Gitlab; regularly hosted in a local repo. Ideal for collective collaboration.
# Cloning locally
git clone path-to-project-directory # 
git clone /home/john/repo new_repo

# Cloning a remote
git clone [URL]
git remote # list the names of its remotes
git remote -v #verbose 

# Creating a remote
# when cloning Git will name the remote: origin
git remote add george https://github.com/george_datacamp/repo # git remote add name URL

# Exercise
# *Cloning a repo*
# Your colleague has been working on the new anxiety in the workplace project and is ready to hand it over to you.
# They tell you that all of their work is in a repo in /home/john/repo.
# Use a single command to clone this repo inside your projects directory, where you are currently located, naming it as john_anxiety_project.

# Instructions
# Clone /home/john/repo, naming the cloned repo as john_anxiety_project.
git clone /home/john/repo/ john_anxiety_project

# *Defining and identifying remotes*
# Now that you have cloned John's repo locally, you decide you want to name the remote as john to serve as a shortcut when working between branches going forward.

# Instructions 1/2
# Add the name john for the /home/john/repo repo.
git remote add john /home/john/repo
# List all remotes including their URL(s).
git remote -v
#######################################################
## IV.C. COLLABORATING WITH GIT > GATHERING FROM A REMOTE
# how to get content from a remote into our local repo.

git fetch origin main # To compare the files in a remote against the contents of a local repo we first need to fetch versions from the remote. Name the remote and the local branch to fetch into.
git fetch origin report # to fetch into a diff branch
git merge origin main # synchronizing content; merge the remote into the local repo's main branch we are located

git pull origin main # fetch and merge using a single command. We execute git pull followed by the remote repo's name and the local repo branch we are merging into. Here, we pull from origin into our local main branch.
git pull origin # pulling unsaved local changes

######## Exercise #########
# *Fetching from a remote*
# If you are not sure how the contents of a remote repo compare to your local repo, then you can gather the remote contents from a specific branch and then compare them to your local branch.
# Your colleague John has set up a remote repo so that his work is backed up in the cloud and accessible to others.

# Instructions 1/3
# Run a command to find out the name(s) of remote repos linked to your project.
git remote
# Gather contents from the remote origin repo into your local main branch.
git fetch orign main
# Compare the remote repo with your local main branch.
git diff origin main

# *Pulling from a remote*
# Fetching is useful, but if you want to bring your local repo's main branch in line with a remote repo, origin, this is possible with a single command!
# In this exercise, you'll work on a file while synchronizing between local and remote repos.

# Instructions 1/4
# Use a single command to fetch and merge the origin repo into your local main branch.
git pull origin main
# Append "No existing mental health diagnosis." to the end of protocol.md.
echo "No existing mental health diagnosis." >> protocol.md
# Add protocol.md to the staging area.
git add protocol.md
# Make a commit with the log message "Updating eligibility criteria".
git commit -m "Updating eligibility criteria"
#######################################################
## IV.D. COLLABORATING WITH GIT > PUSHING TO A REMOTE




